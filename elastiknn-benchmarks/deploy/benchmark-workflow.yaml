apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: elastiknn-benchmark-
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: driverImage
      - name: elastiknnImage
      - name: awsAccessKeyId
      - name: awsSecretAccessKey
      - name: bucket
        value: elastiknn-benchmarks
      - name: shards
        value: 1
      - name: esJvmMemory
        value: 8G
      - name: esTotalMemory
        value: 12G
  templates:
    - name: main
      parallelism: 20
      steps:
        - - name: generate-experiments
            template: generate-experiments
        - - name: enqueue-experiments
            template: enqueue-experiments
        - - name: apply-configmap
            template: apply-configmap
        - - name: execute-elasticsearch
            template: execute-elasticsearch
            arguments:
              parameters:
                - name: experiment
                  value: "{{item}}"
            withParam: "{{steps.enqueue-experiments.outputs.parameters.experiments}}"
        - - name: aggregate-results
            template: aggregate-results

    # Scala app generates experiments, writes them to s3, generates a file containing their keys, writes the file to s3.
    - name: generate-experiments
      container:
        image: "{{workflow.parameters.driverImage}}"
        imagePullPolicy: "Always"
        args:
          - com.klibisz.elastiknn.benchmarks.Generate
          - --experimentsPrefix
          - experiments
          - --bucket
          - "{{workflow.parameters.bucket}}"
          - --keysKey
          - experiments/{{workflow.name}}.json
        env:
          - name: AWS_ACCESS_KEY_ID
            value: "{{workflow.parameters.awsAccessKeyId}}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{workflow.parameters.awsSecretAccessKey}}"

    # Cli app copies experiments to disk so argo can generate a pod for each of the experiments.
    - name: enqueue-experiments
      container:
        image: amazon/aws-cli
        args: ["s3", "cp", "--quiet", "s3://elastiknn-benchmarks/experiments/{{workflow.name}}.json", "/tmp/{{workflow.name}}.json"]
        env:
          - name: AWS_ACCESS_KEY_ID
            value: "{{workflow.parameters.awsAccessKeyId}}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{workflow.parameters.awsSecretAccessKey}}"
      outputs:
        parameters:
          - name: experiments
            valueFrom:
              path: /tmp/{{workflow.name}}.json

    # Create a configmap mounted by the Elasticsearch sidecar containers.
    - name: apply-configmap
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: esconfig
          data:
            elasticsearch.yml: |
              discovery.type: single-node
              cluster.name: "no-cluster"
              network.host: 0.0.0.0
              node.processors: {{workflow.parameters.shards}}
              thread_pool.search.size: {{workflow.parameters.shards}}
            jvm.options: |
              # Memory allocated to JVM.
              -Xms{{workflow.parameters.esJvmMemory}}
              -Xmx{{workflow.parameters.esJvmMemory}}
              # G1GC garbage collection
              13-:-XX:+UseG1GC
              13-:-XX:G1ReservePercent=25
              13-:-XX:InitiatingHeapOccupancyPercent=30
              # Temp directory
              -Djava.io.tmpdir=/tmp
              # Head dump settings
              -XX:+HeapDumpOnOutOfMemoryError
              -XX:HeapDumpPath=data
              # specify an alternative path for JVM fatal error logs
              -XX:ErrorFile=logs/hs_err_pid%p.log
              # JDK 9+ GC logging
              9-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m
              # Informationa bout JIT optimization and inlining. See: https://www.baeldung.com/jvm-method-inlining
              # -XX:+PrintCompilation
              # -XX:+UnlockDiagnosticVMOptions
              # -XX:+PrintInlining
              # VisualVM profiling
              -Dcom.sun.management.jmxremote.ssl=false
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.local.only=false
              -Dcom.sun.management.jmxremote.port=8097
              -Dcom.sun.management.jmxremote.rmi.port=8097
              -Djava.rmi.server.hostname=localhost

    - name: execute-elasticsearch
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: experiment
      volumes:
        - name: esdata
          emptyDir:
            medium: Memory
        - name: esconfig
          configMap:
            name: esconfig
      # Sets the correct permissions for mounted volume.
      securityContext:
        fsGroup: 1000
      # Needed because you can't use parameters in the resources context for some reason.
      podSpecPatch: |
        containers:
          - name: elastiknn
            resources:
              requests:
                cpu: "{{workflow.parameters.shards}}"
                memory: "{{workflow.parameters.esTotalMemory}}"
              limits:
                cpu: "{{workflow.parameters.shards}}"
                memory: "{{workflow.parameters.esTotalMemory}}"
      container:
        image: "{{workflow.parameters.driverImage}}"
        imagePullPolicy: "Always"
        args:
          - com.klibisz.elastiknn.benchmarks.Execute
          - --experimentKey
          - "{{inputs.parameters.experiment}}"
          - --datasetsPrefix
          - "data/processed"
          - --resultsPrefix
          - "results/raw"
          - --bucket
          - "{{workflow.parameters.bucket}}"
          - --numQueries
          - "10000"
          - --warmupQueries
          - "200"
          - --minWarmupRounds
          - "15"
          - --maxWarmupRounds
          - "100"
          - --shards
          - "{{workflow.parameters.shards}}"
        env:
          - name: AWS_ACCESS_KEY_ID
            value: "{{workflow.parameters.awsAccessKeyId}}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{workflow.parameters.awsSecretAccessKey}}"
          - name: JAVA_OPTS
            value: >-
              -XX:MinRAMPercentage=10
              -XX:MaxRAMPercentage=90
              -XX:+HeapDumpOnOutOfMemoryError
              -XX:+ExitOnOutOfMemoryError
        resources:
          requests:
            cpu: 1
            memory: 2G
          limits:
            cpu: 1
            memory: 2G
      sidecars:
        - name: elastiknn
          image: "{{workflow.parameters.elastiknnImage}}"
          imagePullPolicy: "Always"
          ports:
            - name: jmx
              containerport: 8097
              protocol: TCP
          volumeMounts:
            - name: esdata
              mountPath: /usr/share/elasticsearch/data
              readOnly: false
            - name: esconfig
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
              readOnly: true
            - name: esconfig
              mountPath: /usr/share/elasticsearch/config/jvm.options
              subPath: jvm.options
              readOnly: true

    - name: aggregate-results
      container:
        image: "{{workflow.parameters.driverImage}}"
        imagePullPolicy: "Always"
        env:
          - name: AWS_ACCESS_KEY_ID
            value: "{{workflow.parameters.awsAccessKeyId}}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{workflow.parameters.awsSecretAccessKey}}"
        args:
          - com.klibisz.elastiknn.benchmarks.Aggregate
          - --bucket
          - elastiknn-benchmarks
          - --resultsPrefix
          - results/raw
          - --aggregateKey
          - results/aggregate.csv
