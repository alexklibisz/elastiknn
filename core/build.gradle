buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id 'com.google.protobuf' version '0.8.8'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}


dependencies {
    runtime "org.scala-lang:scala-library:${scalaVersion}"
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    runtime "com.thesamet.scalapb:scalapb-runtime_${scalaVersion}:${scalapbVersion}"
    implementation "com.thesamet.scalapb:scalapb-runtime_${scalaVersion}:${scalapbVersion}"
    implementation "io.github.scalapb-json:scalapb-circe_${scalaVersion}:${scalapbCirceVersion}"
    runtime "io.github.scalapb-json:scalapb-circe_${scalaVersion}:${scalapbCirceVersion}"
    implementation "io.circe:circe-generic_${scalaVersion}:${circeVersion}"
    implementation "com.google.guava:guava:28.1-jre"
    runtime "com.google.guava:guava:28.1-jre"
    implementation "com.typesafe.scala-logging:scala-logging_${scalaVersion}:3.9.2"
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    plugins {
        scalapb {
            artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:windows@bat" :
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:unix@sh"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                scalapb {
                    // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
                    option 'flat_package'
                }
            }
        }
    }
}

// Add geneated Scala code as a source directory
sourceSets {
    main {
        scala {
            srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
        }
    }
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
    from sourceSets.main.proto
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "${project.name}_${scalaVersion}"
            from components.java
            artifact tasks.sourceJar
            artifact tasks.javadocJar
            pom {
                name = "${rootProject.group}:${artifactId}"
                description = 'Schema objects and algorithms for the ElastiKnn Elasticsearch plugin'
                url = 'https://github.com/alexklibisz/elastiknn'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'alexklibisz'
                        name = 'Alex Klibisz'
                        email = 'aklibisz@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/alexklibisz/elastiknn.git'
                    developerConnection = 'scm:git:ssh://github.com/alexklibisz/elastiknn.git'
                    url = 'https://github.com/alexklibisz/elastiknn'
                }
            }

        }
    }

    repositories {
        maven {
            url sonatypeUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }

}

signing {
    sign publishing.publications
}
