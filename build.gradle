buildscript {
    ext {
        esVersion = '8.4.2'
        luceneVersion = '9.3.0'
        elastic4sVersion = '8.0.0'
        circeVersion= '0.14.1'
        circeGenericExtrasVersion= '0.14.1'
        scalaShortVersion = '2.13'
        scalaFullVersion = '2.13.6'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath 'gradle.plugin.com.github.maiflai:gradle-scalatest:0.32'
        classpath "org.elasticsearch.gradle:build-tools:${esVersion}"
    }
}

allprojects {

    setGroup('com.klibisz.elastiknn')

    // Use -Pversion=foo123 to override the version. Otherwise uses the version file.
    if (version != 'unspecified') setVersion(version)
    else setVersion(rootProject.file('version').getText().strip())

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

// Make sub-projects easy to reference.
Project api4s = project(':api4s')
Project clientElastic4s = project(':client-elastic4s')
Project lucene = project(':lucene')
Project models = project(':models')
Project plugin = project(':plugin')
Project testing = project(':testing')

// Utility to apply multiple configuration closures to a single project.
// TODO: Why can't you just chain .configure(closure1).configure(closure2)...?
def configure(Project p, List<Closure> configClosures) {
    configClosures.forEach { configure(p, it) }
}

def scalaProjectConfig = {
    apply plugin: 'scala'
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.setAdditionalParameters(List.of("-Xfatal-warnings", "-Ywarn-unused:imports"))
    }
    task unifiedScaladocs(type: ScalaDoc, description: 'Generate unified scaladocs', group: 'Documentation') {
        Set docProjects = subprojects.findAll { it.plugins.hasPlugin('scala') }
        destinationDir = file("${rootProject.buildDir}/docs/scaladoc")
        title = "$project.name $version"
        scalaDocOptions = new ScalaDocOptions()
        subprojects.each { proj ->
            if (docProjects.contains(proj.name)) {
                proj.tasks.withType(ScalaDoc).each {
                    source += proj.sourceSets.main.allJava
                    source += proj.sourceSets.main.allScala
                    classpath += proj.sourceSets.main.compileClasspath
                    excludes += scaladoc.excludes
                    includes += scaladoc.includes
                }
            }
        }
    }
}

configure(api4s, List.of(
        scalaProjectConfig,
        {
            dependencies {
                implementation "org.elasticsearch:elasticsearch-x-content:${esVersion}"
                implementation "org.scala-lang:scala-library:${scalaFullVersion}"
            }
        }
))

configure(clientElastic4s, List.of(
        scalaProjectConfig,
        {
            dependencies {
                api api4s
                api "com.sksamuel.elastic4s:elastic4s-client-esjava_${scalaShortVersion}:${elastic4sVersion}"
                implementation "org.scala-lang:scala-library:${scalaFullVersion}"
            }
        }))

configure(models, Collections.emptyList())

configure(lucene, List.of(
        {
            dependencies {
                implementation models
                implementation "org.apache.lucene:lucene-core:${luceneVersion}"
            }
        }))

configure(plugin, List.of(scalaProjectConfig, {

    apply plugin: 'elasticsearch.esplugin'

    configurations {
        all {
            // Needed to resolve scala minor version conflicts.
            resolutionStrategy.preferProjectModules()
        }
    }

    esplugin {
        name 'elastiknn'
        description 'Elasticsearch plugin for exact and approximate nearest neighbors search on sparse and dense vectors.'
        classname 'com.klibisz.elastiknn.ElastiknnPlugin'
        licenseFile rootProject.file('LICENSE.txt')
        noticeFile rootProject.file('NOTICE.txt')
    }

    dependencies {
        // TODO: a couple of the deps need both runtime _and_ implementation dependencies to run?
        implementation api4s
        implementation lucene
        implementation models
        implementation "com.google.guava:guava:28.1-jre"
        implementation "org.scala-lang:scala-library:${scalaFullVersion}"
        implementation "org.apache.lucene:lucene-backward-codecs:${luceneVersion}"
        runtimeOnly "com.google.guava:failureaccess:1.0.1"
        runtimeOnly "org.scala-lang:scala-library:${scalaFullVersion}"
    }
}))

configure(testing, List.of(scalaProjectConfig, {

    apply plugin: 'com.github.maiflai.scalatest'

    test {
        outputs.upToDateWhen { false }
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
            events "standardOut", "started", "passed", "skipped", "failed"
        }
        maxParallelForks = 1
    }

    dependencies {
        implementation clientElastic4s
        implementation lucene
        implementation models
        implementation plugin
        implementation "ch.qos.logback:logback-classic:1.2.3"
        implementation "com.klibisz.futil:futil_${scalaShortVersion}:0.1.2"
        implementation "com.storm-enroute:scalameter_${scalaShortVersion}:0.19"
        implementation 'com.typesafe:config:1.4.0'
        implementation "com.typesafe.scala-logging:scala-logging_${scalaShortVersion}:3.9.2"
        implementation 'com.vladsch.flexmark:flexmark-all:0.35.10'
        implementation "io.circe:circe-generic-extras_${scalaShortVersion}:${circeGenericExtrasVersion}"
        implementation "io.circe:circe-parser_${scalaShortVersion}:${circeVersion}"
        implementation 'org.apache.commons:commons-math3:3.6.1'
        implementation "org.apache.lucene:lucene-analysis-common:${luceneVersion}"
        implementation "org.apache.lucene:lucene-backward-codecs:${luceneVersion}"
        implementation "org.elasticsearch:elasticsearch:${esVersion}"
        implementation 'org.pegdown:pegdown:1.4.2'
        implementation "org.scala-lang:scala-library:${scalaFullVersion}"
        implementation "org.scalanlp:breeze_${scalaShortVersion}:1.3"
        implementation "org.scalatest:scalatest_${scalaShortVersion}:3.2.0"
    }
}))
