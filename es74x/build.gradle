
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${esVersion}"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id 'com.google.protobuf' version '0.8.8'
}

version = "${version}_es${esVersion}"

apply plugin: 'elasticsearch.esplugin'

licenseFile = rootProject.file("LICENSE.txt")
noticeFile = rootProject.file("NOTICE.txt")

dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
licenseHeaders.enabled = false
testingConventions.enabled = false

configurations {
    all {
        resolutionStrategy.preferProjectModules()
    }
}

dependencies {
    runtime project(':core')
    implementation project(':core')
    runtime "org.scala-lang:scala-library:${scalaVersion}"
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    runtime "com.thesamet.scalapb:scalapb-runtime_${scalaVersion}:${scalapbVersion}"
    implementation "com.thesamet.scalapb:scalapb-runtime_${scalaVersion}:${scalapbVersion}"
    implementation "com.google.guava:guava:28.1-jre"
    runtime "com.google.guava:guava:28.1-jre"
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    plugins {
        scalapb {
            artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:windows@bat" :
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:unix@sh"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                scalapb {
                    // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
                    option 'flat_package'
                    option 'no_lenses'
                }
            }
        }
    }
}

// Add geneated Scala code as a source directory
sourceSets {
    main {
        scala {
            srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
        }
    }
}

esplugin {
    name 'elastiknn'
    description 'Ingest processor and queries for exact and approximate nearest neighbors search'
    classname 'com.klibisz.elastiknn.ElastiKnnPlugin'
    extendedPlugins = ['lang-painless']
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}