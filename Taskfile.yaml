version: '3'

vars:
  VERSION:
    sh: cat version
  PROJECT_ROOT:
    sh: pwd
  GITHUB_URL: https://github.com/alexklibisz/elastiknn

tasks:
  clean:
    desc: Call clean commands in included taskfiles
    deps: 
      - jvmClean
      - pyClean

  dockerLogBenchmarkingCluster:
    desc: Print logs from the benchmarking cluster
    cmds:
      - docker-compose -f docker/docker-compose.benchmarking.yaml logs
      - docker ps -a

  dockerLogTestingCluster:
    desc: Print logs from the testing cluster
    cmds:
      - docker-compose -f docker/docker-compose.testing.yaml logs
      - docker ps -a

  dockerRunBenchmarkingCluster:
    desc: Run a local cluster for benchmarking using docker-compose.
    deps:
      - installDockerCompose
      - jvmAssemble
    cmds:
      - docker-compose -f docker/docker-compose.benchmarking.yaml up --detach --build --force-recreate
      - python3 docker/cluster_ready.py

  dockerRunTestingCluster:
    desc: Run a local cluster for testing using docker-compose.
    deps:
      - installDockerCompose
      - jvmAssemble
    cmds:
      - docker-compose -f docker/docker-compose.testing.yaml up --detach --build --force-recreate
      - python3 docker/cluster_ready.py

  dockerStopBenchmarkingCluster:
    desc: Stop the local benchmarking cluster.
    cmds:
      - docker-compose -f docker/docker-compose.benchmarking.yaml down

  dockerStopTestingCluster:
    desc: Stop the local testing cluster.
    cmds:
      - docker-compose -f docker/docker-compose.testing.yaml down

  jvmClean:
    desc: Clean all JVM artifacts
    cmds:
      - find . -name target -type d | xargs rm -rf

  jvmTest:
    desc: Run JVM tests using SBT
    cmds:
      - sbt -client test

  jvmCompile:
    desc: Compile Scala and Java code using SBT
    cmds:
      - sbt -client compile Test/compile

  jvmAssemble:
    desc: Build the plugin bundle using SBT
    cmds:
      - rm -rf elastiknn-plugin/target/*.zip
      - sbt -client elastiknn-plugin/elasticsearchPluginBundle

  jvmRunLocal:
    desc: Run a local Elasticsearch cluster with the plugin using SBT
    cmds:
      - sbt -client elastiknn-plugin/elasticsearchPluginRun

  jvmRunLocalDebug:
    desc: Run a local Elasticsearch cluster in debug mode with the plugin using SBT
    cmds:
      - sbt -client elastiknn-plugin/elasticsearchPluginDebug

  jvmPublishRelease:
    desc: Publish an official release to Github
    deps:
      - jvmAssemble
    status:
      - curl -f -s -o /dev/null {{ .GITHUB_URL }}/releases/tag/{{ .VERSION }}
    cmds:
      - gh release create --generate-notes {{ .VERSION }} elastiknn-plugin/target/elastiknn-*.zip

  jvmPublishSnapshot:
    desc: Publish a snapshot of the plugin to Github
    deps:
      - jvmAssemble
    cmds:
      - gh release delete {{ .VERSION }} --yes || true
      - gh release create --prerelease --generate-notes {{ .VERSION }} elastiknn-plugin/target/elastiknn-*.zip

  installDockerCompose:
    desc: Install docker-compose using pip
    status:
      - docker-compose --version
    cmds:
      - python3 -m pip install docker-compose

  pyCreateVenv:
    desc: Create python virtual environment
    dir: client-python
    cmds:
      - python3 --version
      - python3 -m pip install --quiet virtualenv
      - python3 -m virtualenv -p python3.7 venv
      - touch requirements.txt
    generates:
      - venv
    status:
      - test -d venv

  pyClean:
    desc: Delete python virtual environment
    dir: client-python
    cmds:
      - rm -rf venv

  pyInstallRequirements:
    desc: Install python dependencies from requirements.txt
    dir: client-python
    deps:
      - pyCreateVenv
    sources:
      - venv/bin/*
      - setup.py
      - requirements*txt
    cmds:
      - venv/bin/pip install --quiet -r requirements.txt
      - venv/bin/pip install --quiet -r requirements-build.txt

  pyTest:
    desc: Run python tests against local cluster
    dir: client-python
    deps:
      - pyInstallRequirements
    sources:
      - elastiknn/**/*.py
      - setup.py
    cmds:
      - venv/bin/python -m pytest -v -s -o log_cli=True

  pyDocs:
    desc: Generate python docs
    dir: client-python
    deps:
      - pyInstallRequirements
    sources:
      - elastiknn/**/*.py
      - setup.py
    cmds:
      - rm -rf pdoc
      - venv/bin/pdoc3 --html elastiknn -c show_type_annotations=True -o pdoc
      - ls -la pdoc/elastiknn

  pyPublishLocal:
    desc: Publish python library locally
    dir: client-python
    deps:
      - pyInstallRequirements
    cmds:
      - rm -rf dist
      - venv/bin/python setup.py --version {{ .VERSION }} sdist bdist_wheel
      - ls dist

  pyPublishSnapshot:
    desc: Publish python library to testpypi
    dir: client-python
    cmds:
      - task: publish-local
        force: True
      - venv/bin/python -m twine upload -r testpypi --verbose dist/*

  pyPublishRelease:
    desc: Publish python library to pypi
    dir: client-python
    status:
      - curl -f -s -o /dev/null https://pypi.org/project/elastiknn-client/{{ .VERSION }}/
    cmds:
      - task: publish-local
        force: True
      - task: docs
        force: True
      - venv/bin/python -m twine upload -r pypi --verbose dist/*
